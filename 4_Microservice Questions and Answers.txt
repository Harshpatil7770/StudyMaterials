=======================================================================================================================
=======================================================================================================================
                                        !!! Shree Swami Samarth !!!
=======================================================================================================================
=======================================================================================================================
                                                Microservice
=======================================================================================================================

1) What is microservice?
-----------------------------------------------------------------------------------------------------------------------
Micorservice means small small services work together.It must cloud enable.Each service has own database and business layer. Service must be indepdenet deployable.
It maily follows the principle such as a one service has only one resposibility.


2) What is monolithic?
-----------------------------------------------------------------------------------------------------------------------
Monolithic means put functionality into single process.It becomes easy to deploy as single jar/war file. 
It maily used to make smaller projects also build the
proof of concepts. and if there is no expertisize in microservices. 


3) What are the advantages of monolothic?
-----------------------------------------------------------------------------------------------------------------------
   1)A single file get easily deploy as jar/war file.
   2)To build proof of concepts.


4) What are the disadvantges of monolothic?
-----------------------------------------------------------------------------------------------------------------------
   1)Application become Tightly coupled. 
   2)Difficult to manage as well as maintain
   3)Size of application becomes too much large do diffucult to understand.
   4)For small small changes we need to redeploy the whole application. 
   5)For small small changes we need re-test whole application , becuase it becomes
    too much tightely coupled.



5) When to use monolitic?
-----------------------------------------------------------------------------------------------------------------------
   1) To build proof of concepts.
   2) To make smaller project if team size small.


6) When to use microservice?
-----------------------------------------------------------------------------------------------------------------------
   1) To make more complex and scable application.
 

7) What the advantages of microservices?
-----------------------------------------------------------------------------------------------------------------------
   1) Each service indepedent deployable.
   2) loosely coupled easy to test.
   3) Each service has their own respobility i.e changes occurs in single service doesn't affect other services.
   4) To make more complex complex.
   
8) What are the disadvantages of microservice?
----------------------------------------------------------------------------------------------------------------------
   1) Developer need to solve the problem such as load balancer.
   2) No. of services increase high chances of failure.
   3) Development cost is very high
   4) High skilled or microservice expertise is needed.


9) What is the use of spring boot web starter? (Spring Web)
-----------------------------------------------------------------------------------------------------------------------
1) Spring boot web stater provide rapid and easier application developments, also it maily used to develop restful applications.


10) Which embeded database can be used in Spring Boot?
-----------------------------------------------------------------------------------------------------------------------
    In springboot we use H2 database as a embeded database.


11) What is use of spring data JPA?
-----------------------------------------------------------------------------------------------------------------------
Spring data JPA simify the database access using crud operation and query method , so we need to write the boiler plate sql code.

12) What is Spring Cloud Config Server ?  Advantages , Why do we need it ?
-----------------------------------------------------------------------------------------------------------------------
i)  Spring cloud config server is acts as centralized server for our services.
ii) So bascially we will keep common properties on spring cloud config server , so rest all
    service can access it and use it.
iii) So we don't need to right similar properties repetatively.
iv) We will keep those properties on cloud server and rest all service will provide the the path of that server.

Advantage 
i) It reduce the repetation of common properties from the service.
ii) Only non-sensitive info you can keep there.

13) How to use or develop the spring cloud config server ?
-----------------------------------------------------------------------------------------------------------------------
1) To use spring cloud config server or create service in your project first you need add the
dependencies such as spring web , spring cloud config server.
2) @EnableSpringCloudConfig annotation you need to use.
3) Default port number of spring-cloud-config-server application is 8888.
4) You need to keep properties file on server and provide the server path or url in properties file of
   spring cloud config server.

12) What is eureka server? ( portno-8761) @EnableEurekaServer /spring cloud netflix eureka server.
-----------------------------------------------------------------------------------------------------------------------
    Spring cloud netflix eureka server is used to build eureka server. All services must be registered on eureka server. It acts as    monitor of your application.
    To use eureka server we need to add the dependency such as netfilx eureka server and use @EnableEurekaServer annoataions.
    By using eurka server we will can see which service is up or down.
    basically we need unique-service name because service commiunicate with each other based on application-name.

13) Which annotations needed in springBoot application class to enable eureka server?
-----------------------------------------------------------------------------------------------------------------------
    To enable eureka server we need to use @EnableEurekaServer annotations. 


14) Which properties we need to add in application.properties so that eureka server doesn't register itself?
-----------------------------------------------------------------------------------------------------------------------
Eureka server doesn't register itself as client we need to add the some properties inside the application.properties file such as eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false
    

15) What is use of lombok? --- @Data,@AllArgConstrument,@NoAllArgConstructor
-----------------------------------------------------------------------------------------------------------------------
Lombok dependency mainly used to reduce the boilerplate code.We don't need to write manaually no arguments,argument constructor as well as we don't need to write manually setter and getter methods. 
Insted of this we can use the annotations such as @Data,@NoargConstructor,@AllArgsConstructor.


16) How does your application register with eureka server? @EnableDiscoveryClient
-----------------------------------------------------------------------------------------------------------------------
To register your application on eureka server first we need to add the dependency netflix eureka client and use the annonations such as @EnabaleDiscoveryClient(
    It picks the implementations of classpath)
-----------------------------------------------------------------------------------------------------------------------
    
17) How microservice communicate with each other?
-----------------------------------------------------------------------------------------------------------------------
Microservice communicates with each other by using lightweight http rest or messaging protocols(advanced messaging queue protocol)


18) What are the principle of microservice?
-----------------------------------------------------------------------------------------------------------------------
    The main principle of microservice is a sinle service has single resposiblity.


19) What are the main component of microservice?
-----------------------------------------------------------------------------------------------------------------------
    1) Spring config Server
    2) Eureka naming server
    3) Hystrix dashboard
    4) APT GATEWAY
    5) Ribbon


20) What are the challenges in microservice?
-----------------------------------------------------------------------------------------------------------------------
i) Servcies communication will happen over the internet , so it might slow the performs.
ii) Each service will have their own database, so sharing data become difficult.
iii) Security need to keep
iv) Deployement increased the number resources.
v) Error across multiple servcies hard to trace and fix.

21) What are the micorservice monotoring tool?
-----------------------------------------------------------------------------------------------------------------------
    1) splunk
    2) Eureka server

22) What do you understand by spring cloud?
-----------------------------------------------------------------------------------------------------------------------
 Spring cloud helps us to make cloud enable application. It helps us to solve the microservies challenges in such way like
 i) eureka server
 ii) spring cloud config server
 iii) API gateway
 iv) hystrix (fault tolerance)
 v) spring cloud stream for messaging
 vi) ribbon ( client side load balancing)

23) In which case microservice is best suited?
-----------------------------------------------------------------------------------------------------------------------
    1) To make more complex and scabale application microservice architecure is good.
       so we can use in mobile, smart Tvs ,web desktop etc.


25) Which are the some famous compaines using microservice?
-----------------------------------------------------------------------------------------------------------------------------------------
Netflix, amazon, Twitter etc.   


26) What is RabbitMQ?
-----------------------------------------------------------------------------------------------------------------------------------------
RabbitMQ is open source message broker.Suppose app1 wants to send meessage to app2 we can't send directly we require intermediate between them. so rabbitMQ  implement AMQP protocols (advanced messaging queue protocols).
Queue- Quque has pool to store the message. Once consumer listen that message it will gone forever.
    
 To use rabbit mq wwe need to register on amqp cloud. Rabbitmq writtern in erlang language.
 To use the rabbitmq we need to add rabbitmq dependecies.
 We can RabitTemplate for sending the messages. By using queue we set name of the queue.
 
 basically queue means we place message over the queue and send it.
 convertAndsend method we can use to send the message with with queue.
 
 @RabbitListener annotations required to listen the messages.


API Gateway --> (REST) SERVICE A (MQ) ---> SERVICE B (MQ)---> SERVICE C (MQ)


27) What is spring cloud bus?
-----------------------------------------------------------------------------------------------------------------------------------------
Spring cloud bus main purpose is send cache refresh event to all microservices, suppose if you are using spring cloud config server 
and you changed configuration , so spring cloud bus will send refresh event to all servives , so they can do the referesh , so we don't
need restart of servies manually.

You need to trigger the /actuator/busRefresh api.
on spring cloud config server. 
It is automatically provided spring , we don't need to right manually.

28) What are the most commmon dependecies using in microservice?
-----------------------------------------------------------------------------------------------------------------------------------------
    1) Spring cloud config server
    2) Spring cloud netflix eureka server
    3) Spring cloud netflix eureka client
    3) Spring Data JPA
    4) spring JDBC
    5) Mysql Connector
    6) RabbitMq
    7) Open feign
    8) cloud bootstraps
    9) Spring cloud bus
    10) Spring Boot devtools
    
   


29) What is feign?
-----------------------------------------------------------------------------------------------------------------------------------------
    Feign is one of the most popular spring cloud component. If you want to use feign create an interface use annotations such as @Feignclient(name=)
    we neeed add the dependecny such as openFeign and in tha main application we need to add the annotations such as @EnableFeignClients
    The main purpose of feign client is without writing detailed rest template code microservices communicate with each other.

1) without writing detailed rest template code a microservice communicate with each other.
2) We need to add spring cloud starter open feing depedency for this.
3) After that add @EnableOpenFeign annotation into main class.
4) Create an interface write the annotations @EnableFeign inside that interface
   write the method declaration along with the RestAPI. 
   provide your application name and url there.



30) What is use of spring web dependecies?
-----------------------------------------------------------------------------------------------------------------------------------------
    Spring web dependecies used to develop web application or restful web applications. 

   
32) What is use of devtools dependecies?
-----------------------------------------------------------------------------------------------------------------------------------------
Devtools dependecies detect changes automatically and restart the server automatically. we don't need to restart server manually.


34) What is Fallback Method?
-----------------------------------------------------------------------------------------------------------------------------------------
Fallback method is getting used to provide generic response from a service.
Support you have service a and service b.
Service a calling the api of service b and let's consider the service b down.
So we will provide respose back for eg-> please try again later or etc.

We can implement this using circuit breaker i.e, from resilence4j.
The circuit breaker remains close if application running fine and there is no any exception.
The circuit breaker will open if application is down.
We can define the timeout or threshold also there.


35) What is APIGATEWAY?
-----------------------------------------------------------------------------------------------------------------------------------------
API-Gateway wil acts as single point of entry for your application.
Instead of hitting different different url , client simply heats the only API-Gateway URL.
API-Gateway will route those message to appropriate service.

36) What is Hystrix Dashboard?
-----------------------------------------------------------------------------------------------------------------------------------------
Hystrix Dashboard is used to avoid failure of your application by using circuit breaker mechanism. 
If your application running without any error circuit breaker 
remains closed whereas if your application occurs some error then circuit breaker remains open.To use hystrix dashboard we need yo add spring cloud hystrix depenedency and use the annotations such @ EnableHystrix and @EnableCircuitBreaker.

But hystrix dashboard is deprecated , instead of that you can use resilience4j.

37) How to indepedent microservices communicate with each other?
-----------------------------------------------------------------------------------------------------------------------------------------
Microservices communicate with each other by using Http protocol or AMQP i.e advanced messaging queue protocol.
    
38) Which desgin pattern microservices follows?
-----------------------------------------------------------------------------------------------------------------------------------------
Here are the few famous microservices desing pattern are : 
i) API-Gateway desing pattern
ii) Database per service pattern
iii) Service discovery pattern
iv) Circuit breaker
v) Saga Pattern
vi) Retry pattern
   
   
39) What is snychronus and asychrnous in microservice messaging system?
-----------------------------------------------------------------------------------------------------------------------------------------
Sychronus meassing sender will wait to recieve response back.
It will tight coupled.
For eg - Http request sender will send and wait to get response back,  won't proceed further
         until response get back.

Asynchrous messaging means sender will send the message,  don't wait for response.
It is loosely coupled.
for eg - Sending message VIA kafka , rabbit mq , ibm mq.



40) Where you deploy your microservice application?
-----------------------------------------------------------------------------------------------------------------------------------------
It's deployed on AWS EC2 (elastic cloud computing instance). There was devops team for deployment.

41) Can i have both application.properties file and yaml.properties file in one application?
-----------------------------------------------------------------------------------------------------------------------------------------
Yes you can keep both.

42) Why we need microservice why not monolothic?
-----------------------------------------------------------------------------------------------------------------------------------------
1) Monolothic means very complex application architecture structure.
   Basically we can say monolothic means all component comes under one springboot serivces.
   for eg - component name like -> manager,participant,transaction details like that.
   
   Drawback - code complexity , lot's of package and classes available, as a devolper it's
              very difficult to work on it.
              If you change slight in one class then also you have to test all complete application,
              Tight coupling and business logic is very difficult to understand. tight coupling ,
              and one component donw everything goes down.
              for scalabiltiy purpose we have to increse the number of instance which is costly.
              
              
  It's not like that monolithic means they don't have different kind of services,
  they have but every service is depends upon each other.
  practially we can say , once we from reciving new input, validation,
  and their operations and saving to db operatiosn get performed at only service.
   
  Suppose we recived any bad message then whole application get's down.
  even there is no any cause of other services.
   
   Monolothic we have mutliple services but only in one platform.
   
   
 2) Microo service means number of small small service, for each componet we hae
    differnt service. 
    Scalability, if any service goes down it's not going to imapact on other services.
    ON cloud it is very easy to scale up and down the services,
    for eg - student admission in clg, exams, result portal.
    at admission time we can scale down the exam and result portal.
    on other hand on monolothic we have to scale up all complete application.
    
  
 Microservice small, small function have own separate service.
 such as Input-Gateway, Validation-Service, Output-Gateway,
 so if any bad message comes Input-Gateway goes down.
other service will up and running fine.


43) Practical purpose of eureka server?
-----------------------------------------------------------------------------------------------------------------------
1) Eureka -Server acts as monitor of your application,
we can easily see their which service is up and down

44) How to build our project using mvn commond?
-----------------------------------------------------------------------------------------------------------------------
mvn -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true clean compile package install -Dmaven.test.skip=true -p profile

 -Dmaven.wagon.http.ssl.insecure=true to protect from vulnerability
 
 45) What is postman? why we need?
 ----------------------------------------------------------------------------------------------------------------------
 Postman is a tool. basically it is used to hit the rest api's.
 
 46) When we go for feign client vs message broker?
 ----------------------------------------------------------------------------------------------------------------------------------------
 If your application requirement is request and response i.e., synchronous communication then will go for feign client.

 If your application requriement is request and not depedends upon the response. i.e., asynchronous communication will go with MQ.

 
 47) What topic comes under spring cloud?
----------------------------------------------------------------------------------------------------------------------------------------
1) Spring clound netflix eureka server --> Acts as monitor of your application, each service required unique name, so communication can happer. 
2) Spring cloud config server --> It acts as centraliezed server, will keep common properties in it.  consider 100 of service,
 fatabase name, useenamw and password, dev, prod, cit21, st and sit env.
3) Spring cloud load balancer --> To handler client side load will use it.
4) Spring cloud API gateway  --> Entry point of your spring boot application, will do same basic authenication or validation here or add somming logging info.
5) Fault tolerance --> Used when one service goes down does not going to impact on another service.
6) sleuth and zipkin --> zipkin is ui to see the communication flow beitween the services, sleuth means trace request which comminf to your microservice.

47) Which design pattern microservice follows?
----------------------------------------------------------------------------------------------------------------------------------------
Microservice will follow several desing patterns such as : 
1) API GAteway
2) Circuit breaker
3) Saga Desing pattern
4) Retry desing pattern
5) Eureka Discovery Pattern
6) Database per service

48) How to implement circuit breaker in your microservice?
----------------------------------------------------------------------------------------------------------------------------------------
we can implement circuit breaker in our microservice using resilience4j depedency.
1) First add this resilience4j depedency.
2) Circuit breaker is getting used to avoid failure of your service.
3) for eg - service A and service B , service A calls the service B and let's consider service B is down,
   so that time circuit breaker will open provide generice response to use
   for eg - please try again later or etc msg we can put.
4) Circuit break will close if your application is running fine.
5) using fallback method we can do this. it is also known as fault tolerance.


49) How to handel microservice if there is any fault tolerance?
----------------------------------------------------------------------------------------------------------------------------------------
We can hadel the fault tolerance using
1) circuit breaker ( fallback method)
2) Retry pattern

50) WHat is the return type of fallback methods?
----------------------------------------------------------------------------------------------------------------------------------------
The return of type of fallback method must be same as the on the method you put the @CircuitBreaker annotations.


51) What is closed, open and half open state in circuite breaker desing pattern?
----------------------------------------------------------------------------------------------------------------------------------------
Circuit breaker closed state : 
All service are up and running fine. or requests are processing as per the expectations.

Circuit break open state :
The reuqest are rejected because , the servie are down and avoid the overwhelming.

Circuit break half open state : 
In this case we will check the service are recovered withing the time period or not.
If yes , recovered then circuit breaker will move to close state.
If no , not recovered then circuit breaker will move to open state.

52) What are the properties actuator is going to show? How to implement actactor in your project?
----------------------------------------------------------------------------------------------------------------------------------------
To implement actuator in your application . you need to add the spring boot actuator depedencey.
and in the properties file you can define
management.endpoints.web.explosure=include
*
health
metric
The actuator is subproject of your application . it will show the health information of your application.

-----------------------------------------------------------------------------------------------------------------------------------------
Desing pattern are being used in microservice.

1) API-Gateway
2) Circuit Breaker
3) Eureka Server
4)  database per service
4) Retry Design Pattern
5) Saga design pattern
6)
7) Load balancer
8) Zual


1) API-Gateway desing pattern
---------------------------------------------------------------------------------------------------------------------------------
1) API-Gateway will act entry point for your application.
2) All request will recieve first to API gateway and api-gateway will 
   route those request to specific or appropriate service.
3) Instead of heating different different ports , client will 
   send request to API-Gateway , gateway will router that request.

We can implement authentication and authorization in API gateway. 
It will first validate the jwt token and after that it will route those requests.

2) Circuit Breaker Design Pattern
---------------------------------------------------------------------------------------------------------------------------------
i) circuit breaker design pattern is nothing to avoid failure of your application or service.
ii) We can implement circuit breaker using resilence4j.
iii) To avoid failure of your application or service , will use it and using 
     fallback method will provide default response back.
iv) circuit breaker will have three types - close , open , half open.

close - 
circuit breaker will be closed state if there is no failure , the services are working fine.

open - 
circuit breaker will open ,if there is failure, will return response from fallback method.
It will open until the mentioned threadshould. The circuit will open state means
it won't call to the downstream of who ever service is down. it will simply provide response
back from fallback method

half open - 
circuit breaker will be half open state , if specific time and it will allow to the service
with specific number of times. if the failed service are recovered then circuit breaker will
go to close state, if not recoverd then it will go to open state.


3) Eureka Server or Service Disovery Pattern
---------------------------------------------------------------------------------------------------------------------------------
1) Eureka server will act as monitor of your application.
2) We need to register all our services into eureka server.
3) It will shows us the status of service up or down.
4) Also we don't need remember the url , we can use the application name for service to service communication.
   This will work only service to service communication.

4) Database per service design pattern
---------------------------------------------------------------------------------------------------------------------------------
1) Database per service design pattern is nothing but , each service will have their own database.
2) To make service more scalable , indepedent , microservice have this pattern.
3) A service will get complete ownership of that database.
4) Even though if you make changes in the database strcture or the database itself down , if won't affect
   to other service.

5) Loadbalancer 
---------------------------------------------------------------------------------------------------------------------------------
1) Loadbalancer is nothing but , distribution of load or requests accross available instances.
2) Suppose you have three instance of service B , so load balancer will route the or distrivute the 
   load whichever is available or free.
3) Round robbin method also we can use , it will route one by one request to each instanecs.
4) The load balancer with eureka will automatically routes the request to the instances.

6) Retry design Pattern 
---------------------------------------------------------------------------------------------------------------------------------
1) Retry design pattern is getting used to handle temporary failure or network issue between the services.
2) What will do basically  , if there will be some failure, will perform retry operation.
3) Suppose first time you retried , will see the request is properly processing or not.
4) If not then again will wait for specific time and the second time  will do same process.
5) If not then again will wait for specific time and third time will do the same process,
6) If not they you can call the fallback method or shutdonw the application as per your need.


7) How your hadeled transaction in your microservice ?
---------------------------------------------------------------------------------------------------------------------------------
 1) We handled transaction in our microservices by providing each service will have their own transaction hadeling.
 2) Suppose your have service A -> service B -> service C -> service D
    service will listen the msg and process  it , once everything is complete.
    Then it will commit the msg and publish the msg into the inQueue of service B.
    so what we did we are populating the internal communication.
     in two attributes one is type and the second one is payload.
3) Type will be there for each service will have different.
   for eg - service A performed their operation and while publishing msg into service B.
   It will put the naem BusinessValidationSucess. and along with payload.
4) If there will be any failure , that service will commit and rollback thw msg into queue.
5) It will do some retry will proceed to shutdown.

 
